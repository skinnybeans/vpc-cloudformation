AWSTemplateFormatVersion: '2010-09-09'

# Extension of test-instances.yml
# Creates autoscaling groups behind load balancers in each tier.
# The autoscaling groups are spread across all three avaliblity zones in each tier.
Mappings:
  availabilityZoneMap:
    apSoutheast2a:
      azA: 'ap-southeast-2a'
      azB: 'ap-southeast-2b'
      azC: 'ap-southeast-2c'
Resources:
# Security group for SSH access only
  securityGroupSsh: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for SSH access"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: SSH
          FromPort: 22
          ToPort: 22
          IpProtocol: '6'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: ALL
          FromPort: 0
          ToPort: 65355
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: SecurityGroupSsh
      VpcId: !ImportValue vpc-id

  # Load balancer security group to allow incoming public traffic
  securityGroupWebsiteLoadbalancer: 
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: "ALB security group"
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            Description: HTTP
            FromPort: 80
            ToPort: 80
            IpProtocol: '6'
          - CidrIp: 0.0.0.0/0
            Description: HTTPS
            FromPort: 443
            ToPort: 443
            IpProtocol: '6'
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            Description: ALL
            FromPort: 0
            ToPort: 65355
            IpProtocol: '-1'
        Tags:
          - Key: Name
            Value: SecurityGroupGeneral
        VpcId: !ImportValue vpc-id

  # Security group to allow load balancer access to the website EC2 instances
  securityGroupWebsite: 
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: 'Website security group'
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            Description: ALL
            FromPort: 0
            ToPort: 65355
            IpProtocol: '-1'
        Tags:
          - Key: Name
            Value: SecurityGroupGeneral
        VpcId: !ImportValue vpc-id

  # Self referencing ingress rule for load balancer -> EC2 access
  securityGroupIngressWebsite:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'HTTP'
      GroupId: !Ref securityGroupWebsite
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref securityGroupWebsite
      FromPort: 80
      ToPort: 80

# Website instances
  launchConfigWebsite:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-0b8dea0e70b969adc
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: MyEC2KeyPair
      LaunchConfigurationName: LaunchConfigWebsite
      SecurityGroups:
        - !Ref securityGroupWebsite
        - !Ref securityGroupSsh
      UserData: 
        Fn::Base64: | 
            #!/bin/bash
            # Update packages
            yum update -y
            # Install apache web server
            yum install httpd -y
            # start the webserver
            systemctl start httpd.service
            # make sure webserver started when instance is restarted
            systemctl enable httpd.service
            # add some content to display that allows differentation between instances
            echo "<h1>hello from webserver $(hostname)</h1>" > index.html
            mv ./index.html /var/www/html/index.html

  autoScalingGroupWebsite:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: AutoScalingGroupWebsite
      AvailabilityZones:
        - !FindInMap [availabilityZoneMap, apSoutheast2a, azA]
        - !FindInMap [availabilityZoneMap, apSoutheast2a, azB]
        - !FindInMap [availabilityZoneMap, apSoutheast2a ,azC]
      Cooldown: '300'
      DesiredCapacity: '3'
      MaxSize: '3'
      MinSize: '3'
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref launchConfigWebsite
      TargetGroupARNs:
        - !Ref targetGroupWebsite
      VPCZoneIdentifier:
        - !ImportValue subnet-id-app-a
        - !ImportValue subnet-id-app-b
        - !ImportValue subnet-id-app-c
  
  loadBalancerWebsite:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref securityGroupWebsite
        - !Ref securityGroupWebsiteLoadbalancer
      Subnets:
        - !ImportValue subnet-id-public-a
        - !ImportValue subnet-id-public-b
        - !ImportValue subnet-id-public-c
      Tags:
        - Key: Name
          Value: loadBalancerWebsite

  targetGroupWebsite:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /index.html
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: 'TargetGroupWebsite'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !ImportValue vpc-id

  loadBalancerListenerWebsite:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref targetGroupWebsite
      LoadBalancerArn: !Ref loadBalancerWebsite
      Port: 80
      Protocol: 'HTTP'

