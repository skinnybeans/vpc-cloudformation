AWSTemplateFormatVersion: '2010-09-09'

############
# Mappings #
############

Mappings:
  subnetCidrMap:
    public:
      subnetA:  "10.0.0.0/23"
      subnetB:  "10.0.2.0/23"
      subnetC:  "10.0.4.0/23"
      reserved: "10.0.6.0/23"
      all:      "10.0.0.0/21"
    app:
      subnetA:  "10.0.8.0/23"
      subnetB:  "10.0.10.0/23"
      subnetC:  "10.0.12.0/23"
      reserved: "10.0.14.0/23"
      all:      "10.0.8.0/21"
    data:
      subnetA:  "10.0.16.0/23"
      subnetB:  "10.0.18.0/23"
      subnetC:  "10.0.20.0/23"
      reserved: "10.0.22.0/23"
      all:      "10.0.16.0/21"
    nat:
      subnetA:  "10.0.24.0/28"
      subnetB:  "10.0.24.16/28"
      subnetC:  "10.0.24.32/28"
      reserved: "10.0.24.48/28"
      all:      "10.0.24.0/26"
  portRangeMap:
    http:
      from: 80
      to:   80
    https:
      from: 443
      to:   443
    ssh:
      from: 22
      to:   22
    mysqlDefault:
      from: 3306
      to:   3306
    ephemeral:
      from: 1024
      to:   65355
    all:
      from: 0
      to:   65355

#############
# Resources #
#############

Resources:
  customVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/19
#
# Public subnets
#
  subnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, public, subnetA]
      AvailabilityZone: "ap-southeast-2a"
      Tags:
      - Key: Name
        Value: subnet-public-a

  subnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, public, subnetB]
      AvailabilityZone: "ap-southeast-2b"
      Tags:
      - Key: Name
        Value: subnet-public-b

  subnetPublicC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, public, subnetC]
      AvailabilityZone: "ap-southeast-2c"
      Tags:
      - Key: Name
        Value: subnet-public-c
#
# Appliction subnets
#

  subnetAppA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, app, subnetA]
      AvailabilityZone: "ap-southeast-2a"
      Tags:
      - Key: Name
        Value: subnet-app-a

  subnetAppB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, app, subnetB]
      AvailabilityZone: "ap-southeast-2b"
      Tags:
      - Key: Name
        Value: subnet-app-b

  subnetAppC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, app, subnetC]
      AvailabilityZone: "ap-southeast-2c"
      Tags:
      - Key: Name
        Value: subnet-app-c
#
# Data subnets
#
  subnetDataA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, data, subnetA]
      AvailabilityZone: "ap-southeast-2a"
      Tags:
      - Key: Name
        Value: subnet-data-a

  subnetDataB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, data, subnetB]
      AvailabilityZone: "ap-southeast-2b"
      Tags:
      - Key: Name
        Value: subnet-data-b

  subnetDataC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, data, subnetC]
      AvailabilityZone: "ap-southeast-2c"
      Tags:
      - Key: Name
        Value: subnet-data-c

#
# NAT subnets
#
  subnetNatA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, nat, subnetA]
      AvailabilityZone: "ap-southeast-2a"
      Tags:
      - Key: Name
        Value: subnet-nat-a

  subnetNatB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, nat, subnetB]
      AvailabilityZone: "ap-southeast-2b"
      Tags:
      - Key: Name
        Value: subnet-nat-b

  subnetNatC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !FindInMap [subnetCidrMap, nat, subnetC]
      AvailabilityZone: "ap-southeast-2c"
      Tags:
      - Key: Name
        Value: subnet-nat-c

#
# Internet gateway
#

  internetGatewayCustom:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: igw-custom

  attachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref internetGatewayCustom
      VpcId: !Ref customVPC

#
# Elastic IPs for NAT gateways
#

  elasticIPNatA:
    Type: AWS::EC2::EIP
    DependsOn: attachInternetGateway
    Properties:
      Domain: !Ref customVPC

  elasticIPNatB:
    Type: AWS::EC2::EIP
    DependsOn: attachInternetGateway
    Properties:
      Domain: !Ref customVPC

  elasticIPNatC:
    Type: AWS::EC2::EIP
    DependsOn: attachInternetGateway
    Properties:
      Domain: !Ref customVPC

#
# NAT gateways
#

  natGatewayA:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt elasticIPNatA.AllocationId
      SubnetId: !Ref subnetNatA
      Tags: 
        - Key: Name
          Value: nat-gateway-a

  natGatewayB:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt elasticIPNatB.AllocationId
      SubnetId: !Ref subnetNatB
      Tags: 
        - Key: Name
          Value: nat-gateway-b

  natGatewayC:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt elasticIPNatC.AllocationId
      SubnetId: !Ref subnetNatC
      Tags: 
        - Key: Name
          Value: nat-gateway-c

#
# Public route table
#
  routeTablePublic:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref customVPC
      Tags:
        - Key: Name
          Value: route-table-public

  routePublicInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: attachInternetGateway
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGatewayCustom
      RouteTableId: !Ref routeTablePublic

  subnetRoutePublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTablePublic
      SubnetId: !Ref subnetPublicA

  subnetRoutePublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTablePublic
      SubnetId: !Ref subnetPublicB

  subnetRoutePublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTablePublic
      SubnetId: !Ref subnetPublicC

#
# Application route tables
#

  routeTableAppA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref customVPC
      Tags:
        - Key: Name
          Value: route-table-app-a

  routeAppNatGatewayA:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayA
      RouteTableId: !Ref routeTableAppA

  subnetRouteAppA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableAppA
      SubnetId: !Ref subnetAppA

  routeTableAppB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref customVPC
      Tags:
        - Key: Name
          Value: route-table-app-b

  routeAppNatGatewayB:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayB
      RouteTableId: !Ref routeTableAppB

  subnetRouteAppB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableAppB
      SubnetId: !Ref subnetAppB

  routeTableAppC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref customVPC
      Tags:
        - Key: Name
          Value: route-table-app-c

  routeAppNatGatewayC:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayC
      RouteTableId: !Ref routeTableAppC

  subnetRouteAppC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableAppC
      SubnetId: !Ref subnetAppC

#
# Data route tables
#
  routeTableDataA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref customVPC
      Tags:
        - Key: Name
          Value: route-table-data-a

  routeDataNatGatewayA:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayA
      RouteTableId: !Ref routeTableDataA

  subnetRouteDataA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableDataA
      SubnetId: !Ref subnetDataA

  routeTableDataB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref customVPC
      Tags:
        - Key: Name
          Value: route-table-data-b

  routeDataNatGatewayB:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayB
      RouteTableId: !Ref routeTableDataB

  subnetRouteDataB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableDataB
      SubnetId: !Ref subnetDataB

  routeTableDataC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref customVPC
      Tags:
        - Key: Name
          Value: route-table-data-c

  routeDataNatGatewayC:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayC
      RouteTableId: !Ref routeTableDataC

  subnetRouteDataC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableDataC
      SubnetId: !Ref subnetDataC

#
# NAT route tables
#
  routeTableNat:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref customVPC
      Tags:
        - Key: Name
          Value: route-table-nat

  routeNatInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: attachInternetGateway
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGatewayCustom
      RouteTableId: !Ref routeTableNat

  subnetRouteNatA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableNat
      SubnetId: !Ref subnetNatA

  subnetRouteNatB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableNat
      SubnetId: !Ref subnetNatB

  subnetRouteNatC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref routeTableNat
      SubnetId: !Ref subnetNatC

#
# Public NACLs
#
  naclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref customVPC
      Tags:
      - Key: Name
        Value: nacl-public

  naclSubetAssociationPublicA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetPublicA
      NetworkAclId: !Ref naclPublic

  naclSubetAssociationPublicB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetPublicB
      NetworkAclId: !Ref naclPublic

  naclSubetAssociationPublicC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetPublicC
      NetworkAclId: !Ref naclPublic
  
# Public ingress rules

  naclEntryPublicNatInAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 100
      Protocol: -1   # all
      RuleAction: deny
      Egress: false
      CidrBlock: !FindInMap [subnetCidrMap, nat, all]
      PortRange:
        From: !FindInMap [portRangeMap, all, from]
        To: !FindInMap [portRangeMap, all, to]

  naclEntryPublicAllInEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 200
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, ephemeral, from]
        To: !FindInMap [portRangeMap, ephemeral, to]

  naclEntryPublicDataInAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 300
      Protocol: -1   # all
      RuleAction: deny
      Egress: false
      CidrBlock: !FindInMap [subnetCidrMap, data, all]
      PortRange:
        From: !FindInMap [portRangeMap, all, from]
        To: !FindInMap [portRangeMap, all, to]

  naclEntryPublicAllInHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 400
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, http, from]
        To: !FindInMap [portRangeMap, http, to]

  naclEntryPublicAllInHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 500
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, https, from]
        To: !FindInMap [portRangeMap, https, to]

  naclEntryPublicAllInSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 600
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, ssh, from]
        To: !FindInMap [portRangeMap, ssh, to]

# Public egress rules

  naclEntryPublicNatOutAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 100
      Protocol: -1   # all
      RuleAction: deny
      Egress: true
      CidrBlock: !FindInMap [subnetCidrMap, nat, all]
      PortRange:
        From: !FindInMap [portRangeMap, all, from]
        To: !FindInMap [portRangeMap, all, to]

  naclEntryPublicAllOutSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 200
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, ssh, from]
        To: !FindInMap [portRangeMap, ssh, to]

  naclEntryPublicDataOutAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 300
      Protocol: -1   # all
      RuleAction: deny
      Egress: true
      CidrBlock: !FindInMap [subnetCidrMap, data, all]
      PortRange:
        From: !FindInMap [portRangeMap, all, from]
        To: !FindInMap [portRangeMap, all, to]

  naclEntryPublicAllOutHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 400
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, http, from]
        To: !FindInMap [portRangeMap, http, to]

  naclEntryPublicAllOutHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 500
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, https, from]
        To: !FindInMap [portRangeMap, https, to]

  naclEntryPublicAllOutEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic
      RuleNumber: 600
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, ephemeral, from]
        To: !FindInMap [portRangeMap, ephemeral, to]

#
# Application NACLs
#
  naclApp:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref customVPC
      Tags:
      - Key: Name
        Value: nacl-app

  naclSubetAssociationAppA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetAppA
      NetworkAclId: !Ref naclApp

  naclSubetAssociationAppB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetAppB
      NetworkAclId: !Ref naclApp

  naclSubetAssociationAppC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetAppC
      NetworkAclId: !Ref naclApp

# Application ingress rules

  naclEntryAppInPublicSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 100
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: !FindInMap [subnetCidrMap, public, all]
      PortRange:
        From: !FindInMap [portRangeMap, ssh, from]
        To: !FindInMap [portRangeMap, ssh, to]

  naclEntryAppInAllHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 200
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, http, from]
        To: !FindInMap [portRangeMap, http, to]

  naclEntryAppInAllHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 300
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, https, from]
        To: !FindInMap [portRangeMap, https, to]

  naclEntryAppInAllEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 400
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, ephemeral, from]
        To: !FindInMap [portRangeMap, ephemeral, to]

# Application egress rules

  naclEntryAppOutAllHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 200
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, http, from]
        To: !FindInMap [portRangeMap, http, to]

  naclEntryAppOutAllHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 300
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, https, from]
        To: !FindInMap [portRangeMap, https, to]

  naclEntryAppOutAllEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 400
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, ephemeral, from]
        To: !FindInMap [portRangeMap, ephemeral, to]

#
# Data NACLs
#
  naclData:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref customVPC
      Tags:
      - Key: Name
        Value: nacl-data

  naclSubetAssociationDataA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetDataA
      NetworkAclId: !Ref naclData

  naclSubetAssociationDataB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetDataB
      NetworkAclId: !Ref naclData

  naclSubetAssociationDataC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetDataC
      NetworkAclId: !Ref naclData

# Data ingress rules

  naclEntryDataInPublicSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 100
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: !FindInMap [subnetCidrMap, public, all]
      PortRange:
        From: !FindInMap [portRangeMap, ssh, from]
        To: !FindInMap [portRangeMap, ssh, to]

  naclEntryDataInPublicAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 200
      Protocol: -1   # All
      RuleAction: deny
      Egress: false
      CidrBlock: !FindInMap [subnetCidrMap, public, all]
      PortRange:
        From: !FindInMap [portRangeMap, all, from]
        To: !FindInMap [portRangeMap, all, to]

  naclEntryDataInAppHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 300
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: !FindInMap [subnetCidrMap, app, all]
      PortRange:
        From: !FindInMap [portRangeMap, http, from]
        To: !FindInMap [portRangeMap, http, to]

  naclEntryDataInAppHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 400
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: !FindInMap [subnetCidrMap, app, all]
      PortRange:
        From: !FindInMap [portRangeMap, https, from]
        To: !FindInMap [portRangeMap, https, to]

  naclEntryDataInAppMysql:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 500
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: !FindInMap [subnetCidrMap, app, all]
      PortRange:
        From: !FindInMap [portRangeMap, mysqlDefault, from]
        To: !FindInMap [portRangeMap, mysqlDefault, to]

  naclEntryDataInAllEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 600
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, ephemeral, from]
        To: !FindInMap [portRangeMap, ephemeral, to]

# Data egress rules

  naclEntryDataOutAllHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 200
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, http, from]
        To: !FindInMap [portRangeMap, http, to]

  naclEntryDataOutAllHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 300
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, https, from]
        To: !FindInMap [portRangeMap, https, to]

  naclEntryDataOutAllEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclData
      RuleNumber: 400
      Protocol: 6   # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: !FindInMap [portRangeMap, ephemeral, from]
        To: !FindInMap [portRangeMap, ephemeral, to]

###########
# Outputs #
###########

Outputs:
#
# VPC
#
  outputVPC:
    Description: Reference VPC
    Value: !Ref customVPC
    Export:
      Name: vpc-id

#
# Public subnets
#
  outputPublicSubnetA:
    Description: Reference for public subnet A
    Value: !Ref subnetPublicA
    Export:
      Name: subnet-id-public-a

  outputPublicSubnetB:
    Description: Reference for public subnet B
    Value: !Ref subnetPublicB
    Export:
      Name: subnet-id-public-b

  outputPublicSubnetC:
    Description: Reference for public subnet C
    Value: !Ref subnetPublicC
    Export:
      Name: subnet-id-public-c

#
# Application subnets
#
  outputAppSubnetA:
    Description: Reference for app subnet A
    Value: !Ref subnetAppA
    Export:
      Name: subnet-id-app-a

  outputAppSubnetB:
    Description: Reference for app subnet B
    Value: !Ref subnetAppB
    Export:
      Name: subnet-id-app-b

  outputAppSubnetC:
    Description: Reference for app subnet C
    Value: !Ref subnetAppC
    Export:
      Name: subnet-id-app-c

#
# Data subnets
#
  outputDataSubnetA:
    Description: Reference for data subnet A
    Value: !Ref subnetDataA
    Export:
      Name: subnet-id-data-a

  outputDataSubnetB:
    Description: Reference for data subnet B
    Value: !Ref subnetDataB
    Export:
      Name: subnet-id-data-b

  outputDataSubnetC:
    Description: Reference for data subnet C
    Value: !Ref subnetDataC
    Export:
      Name: subnet-id-data-c